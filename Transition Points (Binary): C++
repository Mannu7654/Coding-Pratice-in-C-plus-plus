// Given a sorted array containing only 0s and 1s,
// find the transition point, i.e., the first index where 1 was observed, and before that, only 0 was observed.


#include<bits/stdc++.h>
using namespace std;

int transitionPoint(int arr[], int n)
{
    int low = 0, high = n - 1, mid;
   
    while (low <= high)
    {
        mid = (low + high) / 2;

        if(arr[mid] == 1 && (mid == 0 || arr[mid - 1] == 0))
	    {
            return mid;
        }
	    else if (arr[mid] == 0)
	    {
            low = mid + 1;
        }
	    else
	    {
            high = mid - 1;
        }
    }

    return -1;
    
}


int main()
{
    int n, num;
    cout<<"Enter the number of added element: -- "<<endl;
    cin>>n;
    
    int arr[n];
    
    cout<<"The array elements are: --->  "<<endl;
    
    for(int i=0;i<n;i++)
    {
    	cin>>num;
    	
    	if(num == 0 || num == 1)
    	{
    		arr[i]== num;
		}
		else
		{
			cout<<"Sorry!! Please enter 0 and 1 bits."<<endl;
		}
	}

    int transitionPointIndex = transitionPoint(arr, n);

    if (transitionPointIndex != -1)
    {
  	    cout <<"\nThe transition point is at index " << transitionPointIndex << endl;
    }
    else
    {
        cout <<"\nNo transition point found" << endl;
    }

    return 0;
}
