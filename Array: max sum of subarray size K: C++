// Given an array of integers Arr of size N and a number K. Return the maximum sum of a subarray of size K.
// Method 1: --> Using vector

#include<bits/stdc++.h> 
using namespace std; 

class MaxSum{   
public:
    long maximumSumSubarray(int K, vector<int> &Arr , int N){
        
        long int max_sum = INT_MIN;
        long int curr_sum = 0;
        
        for (int i = 0; i < K; i++) {
            curr_sum += Arr[i];
        }
        
        max_sum = max(max_sum, curr_sum);
        
        for (int i = K; i < N; i++) {
            curr_sum += Arr[i] - Arr[i - K];
            max_sum = max(max_sum, curr_sum);
        }
        
        return max_sum;
    }
};

int main() 
{ 
    int N,K;
    cout<<"Size of the array: --> ";
    cin >> N;
    cout<<"\nThe sum of sub array having find the maximum sum: --> ";
    cin>> K;
    cout<<"\nThe element of Array: --> "<<endl;
    
    vector<int>Arr;
    for(int i=0;i<N;++i){
        int x;
        cin>>x;
        Arr.push_back(x);
    }
    
    MaxSum ms;
    cout<<"\nThe maximum sum of subArray : -- > "<<ms.maximumSumSubarray(K,Arr,N) << endl;
    
    return 0; 
    
} 

// Method 2: --> Using array

#include<bits/stdc++.h> 
using namespace std; 

class MaxSum{   
public:
    long maximumSumSubarray(int K, int Arr[], int N){
        
        long int max_sum = INT_MIN;
        long int curr_sum = 0;
        
        
        for (int i = 0; i < K; i++) {
            curr_sum += Arr[i];
        }
        
        max_sum = max(max_sum, curr_sum);
        
        
        for (int i = K; i < N; i++) {
            curr_sum += Arr[i] - Arr[i - K];
            max_sum = max(max_sum, curr_sum);
        }
        
        return max_sum;
    }
};

int main() 
{ 
    int N,K;
    cout<<"Size of the array: --> ";
    cin >> N;
    cout<<"\nThe sum of sub array having find the maximum sum: --> ";
    cin>> K;
    cout<<"\nThe element of Array: --> "<<endl;
    
    int Arr[N];
    
    for(int i=0;i<N;++i){
        cin>>Arr[i];
    }
    
    MaxSum ms;
    cout<<"\nThe maximum sum of subArray : -- > "<<ms.maximumSumSubarray(K,Arr,N) << endl;
    
    return 0; 
    
} 
