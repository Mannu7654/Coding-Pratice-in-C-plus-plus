class Solution {
public:
    int subsetXORSum(vector<int>& nums) {
        int n = nums.size();
        int totalSum = 0;

        int totalSubsets = 1 << n; 

        for (int i = 0; i < totalSubsets; ++i) {
        int currentXOR = 0;

            for (int j = 0; j < n; ++j) {
                if (i & (1 << j)) {
                    currentXOR ^= nums[j];
                }
            }

            totalSum += currentXOR;
        }

        return totalSum;
    }
};

int main() {
    vector<int> nums1 = {1, 3};
    cout << "Output: " << sumOfXORTotals(nums1) << endl; // Output: 6

    vector<int> nums2 = {5, 1, 6};
    cout << "Output: " << sumOfXORTotals(nums2) << endl; // Output: 28

    vector<int> nums3 = {3, 4, 5, 6, 7, 8};
    cout << "Output: " << sumOfXORTotals(nums3) << endl; // Output: 480

    return 0;
}


